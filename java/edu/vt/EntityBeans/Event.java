/*
 * Created by Osman Balci and Team 7 on 2023.4.26
 * Copyright Â© 2023 Osman Balci and Team 7. All rights reserved.
 */

package edu.vt.EntityBeans;

import javax.enterprise.inject.Default;
import javax.persistence.*;
import javax.validation.constraints.NotNull;
import javax.validation.constraints.Size;
import java.io.Serializable;
import java.sql.Timestamp;

@Entity
@Table(name = "Event")

@NamedQueries({
        @NamedQuery(name = "Event.findAll", query = "SELECT e FROM Event e")
        , @NamedQuery(name = "Event.findById", query = "SELECT e FROM Event e WHERE e.id = :id")
        , @NamedQuery(name = "Event.findByVisibility", query = "SELECT e FROM Event e WHERE e.visibility = :visibility")
        , @NamedQuery(name = "Event.findByPassengerCode", query = "SELECT e FROM Event e WHERE e.passengerCode = :passengerCode")
        , @NamedQuery(name = "Event.findByDriverCode", query = "SELECT e FROM Event e WHERE e.driverCode = :driverCode")
        , @NamedQuery(name = "Event.findByUserId", query = "SELECT e FROM Event e WHERE e.userId.id = :userId")
        , @NamedQuery(name = "Event.findPublicEvents", query = "SELECT e FROM Event e WHERE e.visibility = :visibility AND e.endTime >= :currentTime")
})

public class Event implements Serializable {
    private static final long serialVersionUID = 1L;
    /*
    Primary Key id is auto generated by the system as an Integer value
    starting with 1 and incremented by 1, i.e., 1,2,3,...
    A deleted entity object's primary key number is not reused.
     */
    // id INT UNSIGNED NOT NULL AUTO_INCREMENT
    @Id
    @GeneratedValue(strategy = GenerationType.IDENTITY)
    @Basic(optional = false)
    @Column(name = "id")
    private Integer id;

    //    `name` varchar(128) NOT NULL,
    @Basic(optional = false)
    @NotNull
    @Size(min = 1, max = 128)
    @Column(name = "name")
    private String name;
    //	`description` varchar(2048) NOT NULL,
    @Basic(optional = false)
    @NotNull
    @Size(min = 1, max = 2048)
    @Column(name = "description")
    private String description;
    //	`start_time` TIMESTAMP NOT NULL,
    @Basic(optional = false)
    @NotNull
    @Column(name = "start_time")
    private Timestamp startTime;
    //            `end_time` TIMESTAMP NOT NULL,
    @Basic(optional = false)
    @NotNull
    @Column(name = "end_time")
    private Timestamp endTime;
    //            `visibility` varchar(16) NOT NULL,
    @Basic(optional = false)
    @NotNull
    @Size(min = 1, max = 16)
    @Column(name = "visibility")
    private String visibility;
    //	`driver_code` varchar(255) NOT NULL,
    @Basic(optional = false)
    @NotNull
    @Size(min = 1, max = 255)
    @Column(name = "driver_code")
    private String driverCode;
    //	`passenger_code` varchar(255) NOT NULL,
    @Basic(optional = false)
    @NotNull
    @Size(min = 1, max = 255)
    @Column(name = "passenger_code")
    private String passengerCode;
    //	`address` varchar(256) NOT NULL,
    @Basic(optional = false)
    @NotNull
    @Size(min = 1, max = 256)
    @Column(name = "address")
    private String address;
    //	`user_id` INT NOT NULL,
    @JoinColumn(name = "user_id", referencedColumnName = "id")
    @ManyToOne
    private User userId;
    //  `address_id` varchar(128) NOT NULL,
    @Basic(optional = false)
    @NotNull
    @Size(min = 1, max = 128)
    @Column(name = "address_id")
    private String addressId;
    //	`photo` varchar(256) NOT NULL,
    @Basic(optional = false)
    @NotNull
    @Size(min = 1, max = 256)
    @Column(name = "photo")
    private String photo;


    /*
    ======================================================
    Getter and Setter methods for the attributes (columns)
    of the database table User
    ======================================================
     */

    public Event() {

    }
    public Integer getId() {
        return id;
    }

    public void setId(Integer id) {
        this.id = id;
    }

    public String getName() {
        return name;
    }

    public void setName(String name) {
        this.name = name;
    }

    public String getDescription() {
        return description;
    }

    public void setDescription(String description) {
        this.description = description;
    }

    public Timestamp getStartTime() {
        return startTime;
    }

    public void setStartTime(Timestamp startTime) {
        this.startTime = startTime;
    }

    public Timestamp getEndTime() {
        return endTime;
    }

    public void setEndTime(Timestamp endTime) {
        this.endTime = endTime;
    }

    public String getVisibility() {
        return visibility;
    }

    public void setVisibility(String visibility) {
        this.visibility = visibility;
    }

    public String getDriverCode() {
        return driverCode;
    }

    public void setDriverCode(String driverCode) {
        this.driverCode = driverCode;
    }

    public String getPassengerCode() {
        return passengerCode;
    }

    public void setPassengerCode(String passengerCode) {
        this.passengerCode = passengerCode;
    }

    public String getAddress() {
        return address;
    }

    public void setAddress(String address) {
        this.address = address;
    }

    public User getUserId() {
        return userId;
    }

    public void setUserId(User userId) {
        this.userId = userId;
    }

    public String getAddressId() {
        return addressId;
    }

    public void setAddressId(String addressId) {
        this.addressId = addressId;
    }

    public String getPhoto() {
        return photo;
    }

    public void setPhoto(String photo) {
        this.photo = photo;
    }

    //    Instance Methods

    /*
    ================================
    Instance Methods Used Internally
    ================================
     */

    public Boolean isPublic() {
        return visibility.equals("Public");
    }

    // Generate and return a hash code value for the object with database primary key id
    @Override
    public int hashCode() {
        int hash = 0;
        hash += (id != null ? id.hashCode() : 0);
        return hash;
    }

    /*
     Checks if the User object identified by 'object' is the same as the User object identified by 'id'
     Parameter object = User object identified by 'object'
     Returns True if the User 'object' and 'id' are the same; otherwise, return False
     */
    @Override
    public boolean equals(Object object) {
        if (!(object instanceof Event)) {
            return false;
        }
        Event other = (Event) object;
        return (this.id != null || other.id == null) && (this.id == null || this.id.equals(other.id));
    }

    // Return String representation of database primary key id
    @Override
    public String toString() {
        return id.toString();
    }
}
